# -*- coding: utf-8 -*-
"""DLEx3-2keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zjO2oDlGI-aWOryF0SN13Mfgsl5srnGI
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Dense
import warnings
warnings.filterwarnings('ignore')
class RBFLayer(keras.layers.Layer):
    def __init__(self,hidden_dim,s):
        super(RBFLayer, self).__init__()
        self.hidden_dim = hidden_dim
        self.s = s
        self.centers = self.add_weight(name='centers',
                                       shape=(self.hidden_dim,10),
                                       initializer='uniform',
                                       trainable=True)
    def formula(self,x,y):
        return torch.exp(-self.s * (x - y).pow(2).sum(dim=1))

    def forward(self,x):
        a = self.formula(x, self.centers)
        return a

model = keras.Sequential([
    Dense(10, input_shape=(2,), activation='relu'),
    RBFLayer(10,0.02),
    Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='adam')

import numpy as np
X = np.random.randn(100, 2)
y = (X[:, 0] * X[:, 1] > 0).astype(float)

model.fit(X, y, epochs=10, batch_size=32)

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Dense

# Define the RBF layer
class RBFLayer(keras.layers.Layer):
    def __init__(self, units, gamma, **kwargs):
        super(RBFLayer, self).__init__(**kwargs)
        self.units = units
        self.gamma = gamma

    def build(self, input_shape):
        self.centers = self.add_weight(name='centers',
                                       shape=(self.units, input_shape[1]),
                                       initializer='uniform',
                                       trainable=True)
        super(RBFLayer, self).build(input_shape)

    def call(self, inputs):
        diff = tf.expand_dims(inputs, axis=1) - self.centers
        squared_diff = tf.reduce_sum(tf.square(diff), axis=-1)
        return tf.exp(-self.gamma * squared_diff)

# Build the model with the RBF layer
model = keras.Sequential([
    Dense(10, input_shape=(2,), activation='relu'),
    RBFLayer(10, gamma=0.1),
    Dense(1, activation='sigmoid')
])

# Compile the model with binary cross-entropy loss and Adam optimizer
model.compile(loss='binary_crossentropy', optimizer='adam')

# Generate some sample data
import numpy as np
X = np.random.randn(100, 2)
y = (X[:, 0] * X[:, 1] > 0).astype(float)
# Train the model
model.fit(X, y, epochs=10, batch_size=32)



